#include <stdio.h>
#include <stdint.h>

// Initial key (64 bits) represented as two 32-bit integers
const uint32_t initial_key_part1 = 0x0F0F0F0F; // Example: First 28 bits
const uint32_t initial_key_part2 = 0xEFEFEFEF; // Example: Second 28 bits

// Subkey generation schedule for 56-bit key (48 bits of each subkey)
const int key_permuted_choice_1[] = {
    57, 49, 41, 33, 25, 17, 9,
    1, 58, 50, 42, 34, 26, 18,
    10, 2, 59, 51, 43, 35, 27,
    19, 11, 3, 60, 52, 44, 36,
    63, 55, 47, 39, 31, 23, 15,
    7, 62, 54, 46, 38, 30, 22,
};

// Subkey permutation schedule for 48-bit subkey
const int key_permuted_choice_2[] = {
    14, 17, 11, 24, 1, 5,
    3, 28, 15, 6, 21, 10,
    23, 19, 12, 4, 26, 8,
    16, 7, 27, 20, 13, 2,
    41, 52, 31, 37, 47, 55,
};

// Function to generate subkeys
void generateSubkeys(uint64_t initial_key, uint64_t subkeys[]) {
    // Permute the initial key according to the first 28 bits and second 28 bits subsets
    uint32_t permuted_key1 = 0;
    uint32_t permuted_key2 = 0;
    for (int i = 0; i < 28; i++) {
        if ((initial_key >> i) & 1) {
            permuted_key1 |= 1 << (key_permuted_choice_1[i] - 1);
            permuted_key2 |= 1 << (key_permuted_choice_1[i + 28] - 1);
        }
    }

    // Generate subkeys from the permuted keys
    for (int i = 0; i < 16; i++) {
        // Shift left based on the round number
        permuted_key1 = ((permuted_key1 << i) | (permuted_key1 >> (28 - i))) & 0xFFFFFFF;
        permuted_key2 = ((permuted_key2 << i) | (permuted_key2 >> (28 - i))) & 0xFFFFFFF;

        // Combine the shifted keys into a single 56-bit key
        uint64_t combined_key = ((uint64_t)permuted_key1 << 28) | permuted_key2;

        // Permute and compress to get the 48-bit subkey
        uint64_t subkey = 0;
        for (int j = 0; j < 48; j++) {
            if ((combined_key >> j) & 1) {
                subkey |= 1 << (key_permuted_choice_2[j] - 1);
            }
        }
        subkeys[i] = subkey;
    }
}

int main() {
    uint64_t initial_key = ((uint64_t)initial_key_part1 << 32) | initial_key_part2;
    uint64_t subkeys[16]; // Array to store 16 subkeys

    // Generate subkeys
    generateSubkeys(initial_key, subkeys);

    // Display the generated subkeys
    printf("Generated Subkeys:\n");
    for (int i = 0; i < 16; i++) {
        printf("Subkey %d: 0x%llX\n", i + 1, subkeys[i]);
    }

    return 0;
}
